<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InfiniteForgeConstants</name>
    </assembly>
    <members>
        <member name="T:InfiniteForgeConstants.ObjectSettings.AdditionalObjectSettings">
            <summary>
            Class that contains any extra data required for object to exist in forge.
            </summary>
        </member>
        <member name="M:InfiniteForgeConstants.ObjectSettings.AdditionalObjectSettings.#ctor(System.Int32)">
            <summary>
            Create an object's additional settings.
            </summary>
            <param name="variantId"> The variant Id to use when this object has one. </param>
        </member>
        <member name="T:InfiniteForgeConstants.ObjectSettings.GameObject">
            <summary>
            Class that all data required for a forge object.
            </summary>
        </member>
        <member name="M:InfiniteForgeConstants.ObjectSettings.GameObject.#ctor(System.String,System.Nullable{InfiniteForgeConstants.ObjectSettings.ObjectId},InfiniteForgeConstants.ObjectSettings.Transform,InfiniteForgeConstants.ObjectSettings.AdditionalObjectSettings,InfiniteForgeConstants.MaterialSettings.Material)">
            <summary>
            Create a GameObject(Forge Object) from optional parameters.
            </summary>
            <param name="name"> The name to be given to this object in game. </param>
            <param name="objectId"> The id of this object in game. </param>
            <param name="transform"> The data that relates to positioning/rotation... etc of this object. </param>
            <param name="objectSettings"> The additional data this object may require. </param>
            <param name="material"> The material data this object has. </param>
        </member>
        <member name="T:InfiniteForgeConstants.ObjectSettings.ObjectId">
            <summary>
            Enum that contains all forge object Ids used to determine what object they should be
            </summary>
        </member>
        <member name="T:InfiniteForgeConstants.ObjectSettings.PhysicsType">
            <summary>
            Enum that contains physics type ids used in an object's transform.
            </summary>
        </member>
        <member name="T:InfiniteForgeConstants.ObjectSettings.Transform">
            <summary>
            Class that stores all data of a transform for a GameObject (Forge Object)
            </summary>
        </member>
        <member name="P:InfiniteForgeConstants.ObjectSettings.Transform.Rotation">
            <summary>
            Returns the Quaternion Rotation of this transform.
            </summary>
        </member>
        <member name="P:InfiniteForgeConstants.ObjectSettings.Transform.EulerRotation">
            <summary>
            Returns the Euler Rotation of this transform
            </summary>
        </member>
        <member name="P:InfiniteForgeConstants.ObjectSettings.Transform.DirectionVectors">
            <summary>
            Returns the forward and up direction vectors of this transform
            </summary>
        </member>
        <member name="M:InfiniteForgeConstants.ObjectSettings.Transform.#ctor(System.Nullable{System.Numerics.Vector3},System.Nullable{System.Numerics.Vector3},System.Nullable{System.Boolean},System.Nullable{InfiniteForgeConstants.ObjectSettings.PhysicsType},System.Nullable{System.Numerics.Vector3})">
            <summary>
            Creates a transform from all optional parameters using euler rotation.
            </summary>
            <param name="position"> The vector3 position of this object. </param>
            <param name="rotation"> The vector3 (Euler) rotation to generate rotation from. </param>
            <param name="isStatic"> Determines if this object is static or dynamic. </param>
            <param name="physicsType"> The physics type this object has when dynamic. </param>
            <param name="scale"> The vector3 scale of this object. </param>
        </member>
        <member name="M:InfiniteForgeConstants.ObjectSettings.Transform.#ctor(System.Numerics.Vector3,System.ValueTuple{System.Numerics.Vector3,System.Numerics.Vector3},System.Nullable{System.Boolean},System.Nullable{InfiniteForgeConstants.ObjectSettings.PhysicsType},System.Nullable{System.Numerics.Vector3})">
            <summary>
            Creates a transform using direction unit vectors.
            </summary>
            <param name="position"> The vector3 position of this object. </param>
            <param name="directionVectors"> The forward and up direction vectors to generate rotation from. </param>
            <param name="isStatic"> Determines if this object is static or dynamic. </param>
            <param name="physicsType"> The physics type this object has when dynamic. </param>
            <param name="scale"> The vector3 scale of this object. </param>
        </member>
        <member name="M:InfiniteForgeConstants.ObjectSettings.Transform.#ctor(System.Nullable{System.Numerics.Vector3},System.Nullable{System.Numerics.Quaternion},System.Nullable{System.Boolean},System.Nullable{InfiniteForgeConstants.ObjectSettings.PhysicsType},System.Nullable{System.Numerics.Vector3})">
            <summary>
            Creates a transform using a quaternion rotation.
            </summary>
            <param name="position"> The vector3 position of this object. </param>
            <param name="rotation"> The quaternion rotation of this object. </param>
            <param name="isStatic"> Determines if this object is static or dynamic. </param>
            <param name="physicsType"> The physics type this object has when dynamic. </param>
            <param name="scale"> The vector3 scale of this object. </param>
        </member>
        <member name="M:InfiniteForgeConstants.ObjectSettings.Transform.DirectionToEuler(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Converts a forward and up unit vector into a euler rotation
            </summary>
            <param name="forward"> The forward unit vector to use. </param>
            <param name="up"> The up unit vector to use. </param>
            <returns> The euler rotation in radians and degrees </returns>
            <credits> Thanks to Artifice and Oziwag for this function. </credits>
        </member>
        <member name="T:InfiniteForgeConstants.MapSettings.AmbientSound.AmbientSound">
            <summary>
            Class that contains any data required for a map's sound settings.
            </summary>
        </member>
        <member name="M:InfiniteForgeConstants.MapSettings.AmbientSound.AmbientSound.#ctor(System.Nullable{InfiniteForgeConstants.MapSettings.AmbientSound.PrimarySoundId},System.Nullable{InfiniteForgeConstants.MapSettings.AmbientSound.SecondarySoundId},System.Nullable{InfiniteForgeConstants.MapSettings.AmbientSound.ReverbId},System.Nullable{InfiniteForgeConstants.MapSettings.AmbientSound.AudioEffectId},System.Nullable{System.Boolean})">
            <summary>
            Create ambient sound with optional parameters
            </summary>
            <param name="primarySound"> The primary sound of this map. </param>
            <param name="secondarySound"> The secondary sound of this map. </param>
            <param name="reverb"> The reverb sound of this map. </param>
            <param name="audioEffect"> The audio effect of this map. </param>
            <param name="enablePreview"> Determines if sound previews should be enabled. </param>
        </member>
        <member name="T:InfiniteForgeConstants.MapSettings.AmbientSound.AudioEffectId">
            <summary>
            Enum that contains audio effect ids used in map's audio settings
            </summary>
        </member>
        <member name="T:InfiniteForgeConstants.MapSettings.AmbientSound.PrimarySoundId">
            <summary>
            Enum that contains primary sound ids used in map's audio settings
            </summary>
        </member>
        <member name="T:InfiniteForgeConstants.MapSettings.AmbientSound.ReverbId">
            <summary>
            Enum that contains reverb ids used in map's audio settings
            </summary>
        </member>
        <member name="T:InfiniteForgeConstants.MapSettings.AmbientSound.SecondarySoundId">
            <summary>
            Enum that contains secondary sound ids used in map's audio settings
            </summary>
        </member>
        <member name="T:InfiniteForgeConstants.MapSettings.MapId">
            <summary>
            Enum that contains map ids used in the map settings.
            </summary>
        </member>
        <member name="T:InfiniteForgeConstants.MapSettings.MapOptions">
            <summary>
            Class that contains any data required for a map's visual settings.
            </summary>
        </member>
        <member name="M:InfiniteForgeConstants.MapSettings.MapOptions.#ctor(InfiniteForgeConstants.MapSettings.Options.Sunlight,InfiniteForgeConstants.MapSettings.Options.LightBounce,InfiniteForgeConstants.MapSettings.Options.SkyLight,InfiniteForgeConstants.MapSettings.Options.DirectionalSkyLight,InfiniteForgeConstants.MapSettings.Options.WindDirection,InfiniteForgeConstants.MapSettings.Options.VolumetricFog,InfiniteForgeConstants.MapSettings.Options.SkyRendering,InfiniteForgeConstants.MapSettings.Options.AtmosphericFog)">
            <summary>
            Create map options using optional parameters.
            </summary>
            <param name="sunlight"> The sunlight settings of this map. </param>
            <param name="lightBounce"> The light bounce settings of this map. </param>
            <param name="skyLight"> The sky light settings of this map. </param>
            <param name="directionalSkyLight"> The directional sky light settings of this map. </param>
            <param name="windDirection"> The wind direction settings of this map. </param>
            <param name="volumetricFog"> The volumetric fog settings of this map. </param>
            <param name="skyRendering"> The sky rendering settings of this map. </param>
            <param name="atmosphericFog"> The atmospheric fog settings of this map. </param>
        </member>
        <member name="T:InfiniteForgeConstants.MapSettings.Options.AtmosphericFog">
            <summary>
            Class that contains any data required for a map's atmospheric fog settings.
            </summary>
        </member>
        <member name="M:InfiniteForgeConstants.MapSettings.Options.AtmosphericFog.#ctor(System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{InfiniteForgeConstants.MapSettings.Options.ColorId})">
            <summary>
            Create atmospheric fog settings from optional parameters.
            </summary>
            <param name="fogOffset"> The atmospheric fog offset of this map. </param>
            <param name="fogNearFallof"> The atmospheric fog near fall of of this map. </param>
            <param name="fogIntensity"> The atmospheric fog intensity of this map. </param>
            <param name="fogDepthScale"> The atmospheric fog depth scale of this map. </param>
            <param name="fogFallofUp"> The atmospheric fog fall of up of this map. </param>
            <param name="fogFallofDown"> The atmospheric fog fall of down offset of this map. </param>
            <param name="skyFogIntensity"> The atmospheric sky fog intensity of this map. </param>
            <param name="inscattering"> The atmospheric fog inscattering of this map. </param>
            <param name="fakeInscatteringTint"> The atmospheric fog fake inscattering tint of this map. </param>
        </member>
        <member name="T:InfiniteForgeConstants.MapSettings.Options.ColorId">
            <summary>
            Enum that contains color ids used in the map's settings.
            </summary>
        </member>
        <member name="T:InfiniteForgeConstants.MapSettings.Options.DirectionalSkyLight">
            <summary>
            Class that contains any data required for a map's directional sky light settings.
            </summary>
        </member>
        <member name="M:InfiniteForgeConstants.MapSettings.Options.DirectionalSkyLight.#ctor(System.Nullable{InfiniteForgeConstants.MapSettings.Options.ColorId},System.Nullable{InfiniteForgeConstants.MapSettings.Options.ColorId},System.Nullable{InfiniteForgeConstants.MapSettings.Options.ColorId},System.Nullable{InfiniteForgeConstants.MapSettings.Options.ColorId},System.Nullable{InfiniteForgeConstants.MapSettings.Options.ColorId},System.Nullable{InfiniteForgeConstants.MapSettings.Options.ColorId})">
            <summary>
            Create direction sky light settings from optional parameters.
            </summary>
            <param name="topOverride"> The color to override the top sky light. </param>
            <param name="bottomOverride"> The color to override the bottom sky light. </param>
            <param name="northOverride"> The color to override the north sky light. </param>
            <param name="southOverride"> The color to override the south sky light. </param>
            <param name="eastOverride"> The color to override the east sky light. </param>
            <param name="westOverride"> The color to override the west sky light. </param>
        </member>
        <member name="T:InfiniteForgeConstants.MapSettings.Options.LightBounce">
            <summary>
            Class that contains any data required for a map's light bounce settings.
            </summary>
        </member>
        <member name="M:InfiniteForgeConstants.MapSettings.Options.LightBounce.#ctor(System.Nullable{System.Single},System.Nullable{InfiniteForgeConstants.MapSettings.Options.ColorId})">
            <summary>
            Create light bounce settings from optional parameters.
            </summary>
            <param name="intensity"> The intensity of the light bounce of this map. </param>
            <param name="tintOverride"> The color to override light bounce of this map. </param>
        </member>
        <member name="T:InfiniteForgeConstants.MapSettings.Options.SkyLight">
            <summary>
            Class that contains any data required for a map's sky light settings.
            </summary>
        </member>
        <member name="M:InfiniteForgeConstants.MapSettings.Options.SkyLight.#ctor(System.Nullable{System.Single},System.Nullable{InfiniteForgeConstants.MapSettings.Options.ColorId})">
            <summary>
            Create sky light options from optional parameters.
            </summary>
            <param name="intensity"> The intensity of the sky light of this map. </param>
            <param name="tintOverride"> The color to override sky light of this map. </param>
        </member>
        <member name="T:InfiniteForgeConstants.MapSettings.Options.SkyRendering">
            <summary>
            Class that contains any data required for a map's sky rendering settings.
            </summary>
        </member>
        <member name="M:InfiniteForgeConstants.MapSettings.Options.SkyRendering.#ctor(System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{InfiniteForgeConstants.MapSettings.Options.ColorId},System.Nullable{System.Single},System.Nullable{InfiniteForgeConstants.MapSettings.Options.ColorId},System.Nullable{System.Single})">
            <summary>
            Create Sky Rendering settings from optional parameters.
            </summary>
            <param name="skyIntensity"> The sky intensity of this map. </param>
            <param name="sunIntensity"> The sun intensity of this map. </param>
            <param name="skyTint"> The sky tint color of this map. </param>
            <param name="skyTintIntensity"> The sky tint intensity of this map. </param>
            <param name="sunTint"> The sun tint color of this map. </param>
            <param name="sunTintIntensity"> The sun tint intensity of this map. </param>
        </member>
        <member name="T:InfiniteForgeConstants.MapSettings.Options.Sunlight">
            <summary>
            Class that contains any data required for a map's sunlight settings.
            </summary>
        </member>
        <member name="M:InfiniteForgeConstants.MapSettings.Options.Sunlight.#ctor(System.Nullable{System.Single},System.Nullable{InfiniteForgeConstants.MapSettings.Options.ColorId},System.Nullable{System.Numerics.Vector2})">
            <summary>
            Create sunlight settings from optional parameters
            </summary>
            <param name="intensity"> The sunlight intensity of this map. </param>
            <param name="colorOverride"> The sunlight color override of this map. </param>
            <param name="direction"> The sunlight direction of this map. </param>
        </member>
        <member name="T:InfiniteForgeConstants.MapSettings.Options.VolumetricFog">
            <summary>
            Class that contains any data required for a map's volumetric fog settings.
            </summary>
        </member>
        <member name="M:InfiniteForgeConstants.MapSettings.Options.VolumetricFog.#ctor(System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{InfiniteForgeConstants.MapSettings.Options.ColorId},System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Create volumetric fog settings from optional parameters
            </summary>
            <param name="enabled"> Determines if the fog is enabled. </param>
            <param name="density"> The fog density of this map. </param>
            <param name="color"> The fog color of this map. </param>
            <param name="nearRange"> The fog near range of this map. </param>
            <param name="farRange"> The fog far range of this map. </param>
        </member>
        <member name="T:InfiniteForgeConstants.MapSettings.Options.WindDirection">
            <summary>
            Class that contains any data required for a map's wind direction settings.
            </summary>
        </member>
        <member name="M:InfiniteForgeConstants.MapSettings.Options.WindDirection.#ctor(System.Nullable{System.Numerics.Vector3},System.Nullable{System.Single})">
            <summary>
            Create wind direction settings from optional parameters.
            </summary>
            <param name="direction"> The wind direction of this map. </param>
            <param name="speed"> The wind speed of this map. </param>
        </member>
        <member name="T:InfiniteForgeConstants.MapSettings.ScreenEffectId">
            <summary>
            Enum that contains screen effect ids used in map's screen effect settings
            </summary>
        </member>
        <member name="T:InfiniteForgeConstants.Map">
            <summary>
            Class that holds all data of a map, map settings, objects...
            </summary>
        </member>
        <member name="M:InfiniteForgeConstants.Map.#ctor(System.Nullable{InfiniteForgeConstants.MapSettings.MapId},System.Nullable{System.Boolean},System.Nullable{InfiniteForgeConstants.MapSettings.ScreenEffectId},InfiniteForgeConstants.MapSettings.MapOptions,InfiniteForgeConstants.MapSettings.AmbientSound.AmbientSound,System.Collections.Generic.List{InfiniteForgeConstants.ObjectSettings.GameObject})">
            <summary>
            Create a map from all optional parameters
            </summary>
            <param name="mapId"> The specific id of this map. </param>
            <param name="decorators"> Determines if decorators should be used. </param>
            <param name="screenEffectId"> The data for all map screen effects. </param>
            <param name="options"> The data for all settings of this map. </param>
            <param name="ambientSound"> The data for all sound options of this map. </param>
            <param name="gameObjects"> The data for all objects on this map. </param>
        </member>
        <member name="T:InfiniteForgeConstants.MaterialSettings.Grime.GrimeId">
            <summary>
            Enum that contains grime ids used in texturing object's grime
            </summary>
        </member>
        <member name="T:InfiniteForgeConstants.MaterialSettings.Grime.GrimeIdCombination">
            <summary>
            Enum that contains grime ids (combined with swatch Ids but not tested against game) used in texturing object's grime
            </summary>
        </member>
        <member name="T:InfiniteForgeConstants.MaterialSettings.Grime.MaterialGrime">
            <summary>
            Struct that contains any data required for object's grime.
            </summary>
        </member>
        <member name="M:InfiniteForgeConstants.MaterialSettings.Grime.MaterialGrime.#ctor(InfiniteForgeConstants.MaterialSettings.Grime.GrimeId,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="grimeId"> The texture swatch index to use. </param>
            <param name="scratchAmount"> The level of scratch for this texture. </param>
            <param name="grimeAmount"> The level of grime for this texture. </param>
        </member>
        <member name="T:InfiniteForgeConstants.MaterialSettings.Material">
            <summary>
            Class that contains any data required for object's materials and grime.
            </summary>
        </member>
        <member name="M:InfiniteForgeConstants.MaterialSettings.Material.#ctor(System.Nullable{InfiniteForgeConstants.MaterialSettings.Region.MaterialRegion},System.Nullable{InfiniteForgeConstants.MaterialSettings.Region.MaterialRegion},System.Nullable{InfiniteForgeConstants.MaterialSettings.Region.MaterialRegion},InfiniteForgeConstants.MaterialSettings.Grime.MaterialGrime)">
            <summary>
            Creates a material from 3 optional regions and an optional grime region.
            </summary>
            <param name="region1"> The first texture region for this material. </param>
            <param name="region2"> The second texture region for this material. </param>
            <param name="region3"> The third texture region for this material. </param>
            <param name="grime"> The grime texture region for this material. </param>
        </member>
        <member name="T:InfiniteForgeConstants.MaterialSettings.Region.MaterialRegion">
            <summary>
            Struct that contains any data required for object's materials.
            </summary>
        </member>
        <member name="M:InfiniteForgeConstants.MaterialSettings.Region.MaterialRegion.#ctor(InfiniteForgeConstants.MaterialSettings.Region.SwatchId,System.Numerics.Vector3,InfiniteForgeConstants.MaterialSettings.Region.MetalType,System.Single,System.Single)">
            <summary>
            Constructs a material region to be used when texturing an object.
            </summary>
            <param name="swatchId"> The texture swatch index to use. </param>
            <param name="swatchColor"> The color of this texture. </param>
            <param name="metal"> The metallic type of this texture. </param>
            <param name="roughness"> The level of roughness for this texture. </param>
            <param name="colorSpread"> The level of color spread for this texture. </param>
        </member>
        <member name="T:InfiniteForgeConstants.MaterialSettings.Region.MetalType">
            <summary>
            Enum that contains the metal types used in texturing object's materials' metal .
            </summary>
        </member>
        <member name="T:InfiniteForgeConstants.MaterialSettings.Region.SwatchId">
            <summary>
            Enum that contains swatch ids used in texturing object's materials.
            </summary>
        </member>
        <member name="T:InfiniteForgeConstants.MaterialSettings.Region.SwatchIdCombination">
            <summary>
            Enum that contains swatch ids (combined with grime Ids but not tested against game) used in texturing object's material
            </summary>
        </member>
        <member name="T:InfiniteForgeConstants.NodeGraphSettings.EquipmentTypes">
            <summary>
            Enum that contains equipment type ids used in equipment NodeGraph nodes.
            </summary>
        </member>
        <member name="T:InfiniteForgeConstants.NodeGraphSettings.GrenadeTypes">
            <summary>
            Enum that contains grenade type ids used in grenade NodeGraph nodes.
            </summary>
        </member>
        <member name="T:InfiniteForgeConstants.NodeGraphSettings.StringTypes">
            <summary>
            Enum that contains string type ids used in string NodeGraph nodes.
            </summary>
        </member>
        <member name="T:InfiniteForgeConstants.NodeGraphSettings.TeamTypes">
            <summary>
            Enum that contains team type ids used in team NodeGraph nodes.
            </summary>
        </member>
        <member name="T:InfiniteForgeConstants.NodeGraphSettings.VehicleTypes">
            <summary>
            Enum that contains vehicle type ids used in vehicle NodeGraph nodes.
            </summary>
        </member>
        <member name="T:InfiniteForgeConstants.NodeGraphSettings.WeaponCombinationBaseTypes">
            <summary>
            Enum that contains weapon combination base type ids used in weapon combination NodeGraph nodes.
            </summary>
        </member>
        <member name="T:InfiniteForgeConstants.NodeGraphSettings.WeaponCombinationConfigurationTypes">
            <summary>
            Enum that contains weapon combination configuration type ids used in weapon combination NodeGraph nodes.
            </summary>
        </member>
        <member name="T:InfiniteForgeConstants.NodeGraphSettings.WeaponTypes">
            <summary>
            Enum that contains weapon type ids used in weapon NodeGraph nodes.
            </summary>
        </member>
    </members>
</doc>
